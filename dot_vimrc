" Custom VIM configuration file
"
" vi... IMproved
set nocompatible

" ------
" Plug
" ------
call plug#begin('~/.vim/bundle')

" Install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" plugins go here
"
" PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script
" Fuzzy finder
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }  <- replaced by vim-clap
" Plug 'junegunn/fzf.vim' <- replace by vim-clap
Plug 'liuchengxu/vim-clap'

" Build the extra binary if cargo exists on your system.
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }

" The bang version will try to download the prebuilt binary if cargo does not exist.
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }

" :Clap install-binary[!] will always try to compile the binary locally,
" if you do care about the disk used for the compilation, try using the force download way,
" which will download the prebuilt binary even you have installed cargo.
Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }

" `:Clap install-binary[!]` will run using the terminal feature which is inherently async.
" If you don't want that and hope to run the hook synchorously:
Plug 'liuchengxu/vim-clap', { 'do': has('win32') ? 'cargo build --release' : 'make' }

" Easy navigation between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'
" colorscheme vim
Plug 'morhetz/gruvbox'
" color scheme airline
Plug 'Neur1n/solarized_flood'
" NERDTree for file exploring
Plug 'scrooloose/nerdtree'
" Airline
Plug 'bling/vim-airline'
" Substitute smart
Plug 'tpope/vim-abolish'
" code completion (replaced by CoC)
" Plug 'Valloric/YouCompleteMe'
" Clojure REPL
Plug 'guns/vim-sexp',    {'for': 'clojure'}
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': 'clojure'}
Plug 'liquidz/vim-iced', {'branch': 'main','for': 'clojure'}
Plug 'liquidz/vim-iced-coc-source', {'for': 'clojure'}
" Clojure parenthesis
Plug 'luochen1990/rainbow'
" Cljure folding and stuff
" Plug 'clojure-vim/clojure.vim', {'for': 'clojure'}
" Clojure static (I don't think I need that actually...)
" Plug 'guns/vim-clojure-static', {'for': 'clojure'}
" Git
Plug 'tpope/vim-fugitive'
" Python mode (still needed ?)
" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop'  }
" syntax checking
" Plug 'scrooloose/syntastic'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" surround
 Plug 'tpope/vim-surround'
" comments
Plug 'tpope/vim-commentary'
" snippets
Plug 'SirVer/ultisnips'
" handles closing symbols () {} etc..
Plug 'jiangmiao/auto-pairs'
" RDF
Plug 'niklasl/vim-rdf'
" Fast Fold
Plug 'Konfekt/FastFold'
" Fold python
Plug 'tmhedberg/SimpylFold'
" Plug to Qdo an action on all the quikfix list
" Plug 'henrik/vim-qargs'
" Clipboard
Plug 'ojroques/vim-oscyank', {'branch': 'main'}
" All of your Plugins must be added before the following line
call plug#end()            " required

" --------------
" FILES LOCATION
" --------------

" swap files
set directory=$HOME/.vim/swap/

" ------------------
" BASIC CONFIGURATION
" -------------------

" syntax highlighting
syntax on

" load filetype lugins
filetype plugin indent on

" highlight search results
set hlsearch

" find as you type
set incsearch

" case insensitive search
set ignorecase
set smartcase

" indent same level as previous line
set autoindent

" line numbering
set relativenumber
set number

" highlight current line
set cursorline

" backspace for dummy..
set backspace=indent,eol,start

" stop wrapping long lines\
set nowrap

" Change working directory to the current file location
" autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
" Actually no, stay in root
set noautochdir

" more history
set history=1000

" keep a few lines around when scrolling, remember zt zz zb are handy
set scrolloff=5

" encoding
set encoding=utf-8
scriptencoding utf-8

" usefull for CoC
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" safe write disabled for javascript, for hot reloading
autocmd FileType javascript setlocal backupcopy=yes

" ------
" INDENT
" ------

" replace tabs with spaces
set expandtab

" default 2 spaces for indent
set shiftwidth=2

" indentation every 2 columns
set tabstop=2

" backspace deletes indent
set softtabstop=2

" for python file, use 4 spaces for indent
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4

" for email, wrap, spellcheck
autocmd FileType mail setlocal textwidth=80 wrap spell

" for turtle: 4 spaces and set foldmethod to default indent, works well enough
autocmd FileType turtle setlocal shiftwidth=8 tabstop=8 softtabstop=8 foldmethod=indent

" --------
" MAPPINGS
" --------

" arrows are baad
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" leader key is ,
let mapleader = ','
" don't throw away backward search
noremap \ ,

" paste mode, small y
set pastetoggle=<leader>y
" and yank to clipboard, big Y
vnoremap <leader>Y :OSCYank<CR>

if &diff
    set cursorline
    map ] ]c
    map [ [c
endif

" encryption blowfish
set cm=blowfish2

" clear search highlighting
nmap <silent> <leader>h :nohl<CR>

" sudo to write file if required
cmap w!! w !sudo tee % >/dev/null

" adjust panes to be the same size
noremap <leader>= <C-w>=
" zoom one pane
noremap <leader>+ <C-w>_\|<C-w>\|

" redraw window
map <leader>r :redraw!<CR>

" reload vimrc, and reset airline...
map <leader>v :so $MYVIMRC<CR>:AirlineRefresh<CR>

" digraphs conflicts in mutt...
imap <leader>k <C-k>

" pretty json
cnoremap json %!python -m json.tool

" navigate quikfix window lines
map <leader>l :cnext<CR>
" unfold when jumping
set foldopen+=jump
set foldopen+=quickfix

" -----------
" COLORSCHEME
" -----------

" force 256 colors
set t_Co=256

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


set background=dark
" colorscheme solarized
let g:gruvbox_italic=1
colorscheme gruvbox

" custom split bar
set fillchars+=vert:\ 
hi VertSplit ctermbg=bg


" --------------------
" Plugin configuration
" --------------------

" Fugitive
" --------

" git status and move down to the modified/added files
noremap <leader>gs :Git<CR>5j
" git commit, enter in insert mode
noremap <leader>gc :Git commit<CR>i
" git push
noremap <leader>gp :Git push<CR>

" Airline
" -------

" show airline all the time
" set laststatus=2
" add support for powerline font
let g:airline_powerline_fonts = 1
" theme
let g:airline_theme='solarized_flood'
let g:airline_exclude_preview = 0

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


" NERDTree
" --------
"
" toggle nerdtree
map <C-e> :NERDTreeToggle<CR>

" show current file in NERDTree
map <leader>f :NERDTreeFind<CR>

" map "open in split" to be (s)plit / (v)ertical split
let NERDTreeMapOpenSplit = 's'
let NERDTreeMapOpenVSplit = 'v'

" auto close when last open window is a NERDTree panel
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


" NERDTree configuration
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" Clap
" -----
" Use ag to search, respects gitignore repo
" Install ag package: https://github.com/ggreer/the_silver_searcher
" let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <leader>pf :Clap files<CR>
nnoremap <leader>pg :Clap grep2<CR>
nnoremap <leader>pb :Clap buffers<CR>
" theme
let g:clap_theme = 'material_design_dark'
let g:clap_layout={'relative': 'editor'}

" Coc completion/syntax
" ------
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" detect project root
autocmd FileType python let b:coc_root_patterns = ['.git', '.env', 'venv', '.venv', 'setup.cfg', 'setup.py', 'pyproject.toml', 'pyrightconfig.json']

" UtliSnips
" ---------

" tab conflicts with coc
let g:UltiSnipsExpandTrigger = "<c-s>"
" let use the enter key when snippet in youcompleteme list
let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" to edit snippets
nnoremap <leader>s :UltiSnipsEdit<CR>
" edit snippets for current filetype, in an horizontal split
let g:UltiSnipsEditSplit = "horizontal"

" Rainbow parenthesis
" --------------
" yeah, always
let g:rainbow_active = 1

" Clojure ICED
" ---
let g:iced_enable_default_key_mappings = v:true
" kondo analysis (will automatically install)
let g:iced_enable_clj_kondo_local_analysis = v:true
let g:iced_enable_clj_kondo_analysis = v:true

let g:iced#nrepl#path_translation = {
      \ '/tmp': expand('<sfile>:p:h'),
      \ '/root': $HOME,
      \ }

" Clojure
" let g:clojure_fold= 1

" Tmux-navigation
" ---------------

" requires to kill the bash ctrl-j handler
let g:BASH_Ctrl_j = 'off'

" Clipboard
" ---------
set clipboard=unnamedplus

" Custom commands
" -------------
"  Set propertyIndex correctly within the visual selection
function! SetPropertyIndex() range
  let i= 1 | '<,'> g/propertyIndex \zs\d\+/s//\=i/ | let i = i+1
endfunction
vmap <leader>i :call SetPropertyIndex()<CR>
