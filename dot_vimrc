" Custom VIM configuration file
"
" vi... IMproved
set nocompatible

" ------
" Plug
" ------
call plug#begin('~/.vim/bundle')

" Install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" plugins go here
"

Plug 'liuchengxu/vim-clap'
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!'  }
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
" Build the extra binary if cargo exists on your system.
"Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }

" The bang version will try to download the prebuilt binary if cargo does not exist.
"Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }

" :Clap install-binary[!] will always try to compile the binary locally,
" if you do care about the disk used for the compilation, try using the force download way,
" which will download the prebuilt binary even you have installed cargo.
"
" Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }

" `:Clap install-binary[!]` will run using the terminal feature which is inherently async.
" If you don't want that and hope to run the hook synchorously:
"Plug 'liuchengxu/vim-clap', { 'do': has('win32') ? 'cargo build --release' : 'make' }

" Easy navigation between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'
" colorscheme
Plug 'morhetz/gruvbox'
" NERDTree for file exploring
Plug 'scrooloose/nerdtree'
" Airline
Plug 'bling/vim-airline'
" and Airline themes
Plug 'Neur1n/solarized_flood'
" Substitute smart
Plug 'tpope/vim-abolish'
" code completion
Plug 'Valloric/YouCompleteMe'
" color parenthesis
Plug 'luochen1990/rainbow'
" Git
Plug 'tpope/vim-fugitive'
" Python mode
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop'  }
" syntax checking
Plug 'scrooloose/syntastic'
" Plug 'mtscout6/syntastic-local-eslint.vim'
" surround
Plug 'tpope/vim-surround'
" comments
Plug 'tpope/vim-commentary'
" snippets
Plug 'SirVer/ultisnips'
" HTML + PHP indent
" Plug 'captbaritone/better-indent-support-for-php-with-html'
" Easy motion to move around
" Plug 'Lokaltog/vim-easymotion'
" handles auto cloing
Plug 'jiangmiao/auto-pairs'
" RDF
Plug 'niklasl/vim-rdf'
" Mardown preview
" Plug 'JamshedVesuna/vim-markdown-preview'
" Plug 'vim-pandoc/vim-pandoc'
" Plug 'vim-pandoc/vim-pandoc-syntax' 
" Fast Fold
Plug 'Konfekt/FastFold'
" Fold python
Plug 'tmhedberg/SimpylFold'
" Plug to Qdo an action on all the quikfix list
" Plug 'henrik/vim-qargs'
" Syntax for API blueprint
" Plug 'kylef/apiblueprint.vim'
" Syntax for typescript
" Plug 'leafgarland/typescript-vim'
" Syntax for JSX
" Plug 'pangloss/vim-javascript'
" Plug 'maxmellon/vim-jsx-pretty'
" Kotlin
" Plug 'udalov/kotlin-vim'
" Clipboard
Plug 'ojroques/vim-oscyank'
" All of your Plugins must be added before the following line
" marks ?
" Plug 'kshenoy/vim-signature'

" Clojure
Plug 'Olical/conjure', { 'tag': 'v4.50.0' }

call plug#end()            " required

" --------------
" FILES LOCATION
" --------------

" swap files
set directory=$HOME/.vim/swap/

" ------------------
" BASIC CONFIGURATION
" -------------------

" syntax highlighting
syntax on

" cursor too thin in insert mode... see
" https://github.com/neovim/neovim/wiki/FAQ#how-to-change-cursor-shape-in-the-terminal
set guicursor=

" load filetype lugins
filetype plugin indent on

" highlight search results
set hlsearch

" find as you type
set incsearch

" case insensitive search
set ignorecase
set smartcase

" indent same level as previous line
" set autoindent

" line numbering
set relativenumber
set number

" highlight current line
set cursorline

" backspace for dummy..
set backspace=indent,eol,start

" stop wrapping long lines\
set nowrap

" Change working directory to the current file location
" autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
" Actually no, stay in root
set noautochdir

" more history
set history=1000

" keep a few lines around when scrolling
set scrolloff=5

" encoding
set encoding=utf-8
scriptencoding utf-8

" safe write disabled for javascript, for hot reloading
autocmd FileType javascript setlocal backupcopy=yes

" don't show the 80 column gutter
au BufEnter *.* :set colorcolumn=
" ------
" INDENT
" ------

" replace tabs with spaces
set expandtab

" default 2 spaces for indent
set shiftwidth=2

" indentation every 2 columns
set tabstop=2

" backspace deletes indent
set softtabstop=2

" for python file, use 4 spaces for indent
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4

" for email, wrap, spellcheck
autocmd FileType mail setlocal textwidth=80 wrap spell

" for turtle: 4 spaces
" autocmd FileType turtle setlocal shiftwidth=8 tabstop=8 softtabstop=8 expandtab

" --------
" MAPPINGS
" --------

" arrows are baad
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" leader key is ,
let mapleader = ','
let maplocalleader = ','
" don't throw away backward search
noremap \ ,

" paste mode
set pastetoggle=<leader>y
" and copy to clipboard
vnoremap <leader>Y :OSCYankVisual<CR>

" encryption blowfish
if !has('nvim')
  set cm=blowfish2
endif

" clear search highlighting
nmap <silent> <leader>h :nohl<CR>

" sudo to write file if required
cmap w!! w !sudo tee % >/dev/null

" adjust panes to be the same size
map <leader>= <C-w>=
" zoom one pane
noremap <leader>+ <C-w>_\|<C-w>\|

" redraw window
map <leader>r :redraw!<CR>

" reload vimrc
map <leader>v :so $MYVIMRC<CR>:AirlineRefresh<CR>

" digraphs conflicts in mutt...
imap <leader>k <C-k>

" pretty json
" cnoremap json %!python -m json.tool

" navigate quikfix window lines
map <leader>l :cnext<CR>
" unfold when jumping
set foldopen+=jump
set foldopen+=quickfix

" python comments
vnoremap <silent> # :s/^/#/<cr>:noh<cr>
vnoremap <silent> -# :s/^#//<cr>:noh<cr>

" -----------
" COLORSCHEME
" -----------

" force 256 colors
set t_Co=256

set background=dark
let g:gruvbox_italic=1
colorscheme gruvbox

" pane color from tmux
highlight Normal ctermfg=223 ctermbg=none guifg=#ebdbb2 guibg=none

" custom split bar
set fillchars+=vert:\ 
hi VertSplit ctermbg=238

if has('nvim')
  " hi ActiveWindow ctermbg=00 | hi InactiveWindow ctermbg=235
  set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow

  au VimEnter,WinEnter,BufEnter,BufWinEnter,FocusGained * hi ActiveWindow ctermbg=none | hi InactiveWindow ctermbg=237
  au VimLeave,WinLeave,BufLeave,BufWinLeave,FocusLost * hi ActiveWindow ctermbg=237 | hi InactiveWindow ctermbg=none
endif


" --------------------
" Plugin configuration
" --------------------

" Fugitive
" --------
" git status and move down to the modified/added files
noremap <leader>gs :Git<CR>5j
" git commit, enter in insert mode
noremap <leader>gc :Git commit<CR>i
" git push
noremap <leader>gp :Git push<CR>

" Airline
" -------

" show airline all the time
" set laststatus=2
" add support for powerline font
" this conflicts with clap-vim popup... ?
" let g:airline_powerline_fonts = 1
" theme
let g:airline_theme='solarized_flood'
let g:airline_exclude_preview = 0

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" NERDTree
" --------

" toggle nerdtree
map <C-e> :NERDTreeToggle<CR>

" show current file in NERDTree
map <leader>f :NERDTreeFind<CR>

" map "open in split" to be like Ctrl-p
let NERDTreeMapOpenSplit = 's'
let NERDTreeMapOpenVSplit = 'v'

" auto close when last open window is a NERDTree panel
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


" NERDTree configuration
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:NERDTreeWinSize=30

" Clap
" -----
" Use ag to search, respects gitignore repo
" Install ag package: https://github.com/ggreer/the_silver_searcher
nnoremap <leader>pf :Clap files<CR>
nnoremap <leader>pg :Clap grep<CR>
nnoremap <leader>pb :Clap buffers<CR>
" theme
let g:clap_theme = 'solarized_dark'
let g:clap_layout={'relative': 'editor'}

" YouCompleteMe
" -------------

" jump to definition
nnoremap <leader>j :YcmCompleter GoToDefinitionElseDeclaration<CR>

" close preview window when choice selected and leave insert mode
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1

" recommanded Django settings
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string
let g:ycm_min_num_of_chars_for_completion = 1 " to complete short snippets

let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.'],
  \   'objc' : ['->', '.'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }

" force system python (also in virtualenvs)
let g:ycm_path_to_python_interpreter = '/usr/bin/python3'

" I actually want to use some snippet in markdown documents
let g:ycm_filetype_blacklist = {}

" UtliSnips
" ---------

" tab conflicts with youcompleteme
let g:UltiSnipsExpandTrigger = "<tab>"
" let use the enter key when snippet in youcompleteme list
let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" to edit snippets
nnoremap <leader>s :UltiSnipsEdit<CR>
" edit snippets for current filetype, in an horizontal split
let g:UltiSnipsEditSplit = "horizontal"


" Tmux-navigation
" ---------------

" requires to kill the bash ctrl-j handler
let g:BASH_Ctrl_j = 'off'

" Syntastic
" --------

" 80 char width is not enforced for python...
let g:syntastic_python_flake8_args='--ignore=E501,E225,W503,C901'
let g:syntastic_python_checkers = ['flake8']
" eslint if available for JS projects
let g:syntastic_javascript_checkers=['eslint']
" turtle
let g:syntastic_turtle_checkers=['rapper']

" global configuration (recommended default...)
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Python mode
" -----------

" we don't want it to do any linting or completion, 
" Syntastic and YouCompleteMe are taking care of that already
let g:pymode_rope = 0
let g:pymode_lint = 0

" Python doc by pressing K
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" python 3
let g:pymode_python = 'python3'

" Clipboard
" ---------
set clipboard=unnamedplus

" Conjure
" ------
" File mappings for docker
let g:conjure#relative_file_root = getcwd()
" let g:conjure#path_subs = { '/root/.m2' :  '/home/fatz/.m2', '/clov3s': '/home/fatz/clov3s' }

" Custom commands
" -------------
"  Set propertyIndex correctly within the visual selection
function! SetPropertyIndex() range
  let i= 1 | '<,'> g/propertyIndex \zs\d\+/s//\=i/ | let i = i+1
endfunction
vmap <leader>i :call SetPropertyIndex()<CR>
