" Custom VIM configuration file
"
" vi... IMproved
set nocompatible

" ------
" VUNDLE
" ------
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" plugins go here
"
" Ctrl-P for fuzzy find in buffers and filesystem
Plugin 'kien/ctrlp.vim'
" Easy navigation between vim and tmux panes
Plugin 'christoomey/vim-tmux-navigator'
" Seoul colorscheme
Plugin 'junegunn/seoul256.vim.git'
" NERDTree for file exploring
Plugin 'scrooloose/nerdtree'
" Airline
Plugin 'bling/vim-airline'
" Ack to grep files
Plugin 'mileszs/ack.vim'
" code completion
Plugin 'Valloric/YouCompleteMe'
" Git
Plugin 'tpope/vim-fugitive'
" Python mode
Plugin 'klen/python-mode'
" syntax checking
Plugin 'scrooloose/syntastic'
" surround
Plugin 'tpope/vim-surround'
" comments
Plugin 'scrooloose/nerdcommenter'
" snippets
Plugin 'SirVer/ultisnips'
" HTML + PHP indent
Plugin 'captbaritone/better-indent-support-for-php-with-html'
" Easy motion to move around
Plugin 'Lokaltog/vim-easymotion'
" handles auto cloing
Plugin 'jiangmiao/auto-pairs'
" Mardown preview
Plugin 'JamshedVesuna/vim-markdown-preview'
" Fast Fold
Plugin 'Konfekt/FastFold'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on

" --------------
" FILES LOCATION
" --------------

" swap files
set directory=$HOME/.vim/swap//

" ------------------
" BASIC CONFIGURATION
" -------------------

" syntax highlighting
syntax on

" highlight search results
set hlsearch

" find as you type
set incsearch

" case insensitive search
set ignorecase
set smartcase

" indent same level as previous line
set autoindent

" line numbering
set relativenumber
set number

" highlight current line
set cursorline

" backspace for dummy..
set backspace=indent,eol,start

" stop wrapping long lines\
set nowrap

" Change working directory to the current file location
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

" more history
set history=1000

" keep a few lines around when scrolling
set scrolloff=5

" encoding
set encoding=utf-8

" ------
" INDENT
" ------

" replace tabs with spaces
set expandtab

" default 2 spaces for indent
set shiftwidth=2

" indentation every 2 columns
set tabstop=2

" backspace deletes indent
set softtabstop=2

" for python file, use 4 spaces for indent
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4

" -----------------
" Auto reload vimrc
"------------------
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" --------
" MAPPINGS
" --------

" arrows are baad
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" leader key is ,
let mapleader = ','
" don't throw away backward search
noremap \ ,

" paste mode
set pastetoggle=<leader>y

" encryption blowfish
set cm=blowfish2

" clear search highlighting
nmap <silent> <leader>/ :nohl<CR>

" sudo to write file if required
cmap w!! w !sudo tee % >/dev/null

" adjust panes to be the same size
map <leader>= <C-w>=

" redraw window
map <leader>r :redraw!<CR>

" -----------
" COLORSCHEME
" -----------

" force 256 colors
set t_Co=256

set background=dark
" a bit darker
let g:seoul256_background = 235
colorscheme seoul256

" custom split bar
set fillchars+=vert:\ 
hi VertSplit ctermbg=bg


" --------------------
" Plugin configuration
" --------------------

" Fugitive
" --------

" git staus and move down to the modified/added files
noremap <leader>gs :Gstatus<CR>5j
" git commit, enter in insert mode
noremap <leader>gc :Gcommit<CR>i
" git push
noremap <leader>gp :Gpush<CR>

" Airline
" -------

" show airline all the time
set laststatus=2
" add support for powerline font
let g:airline_powerline_fonts = 1

" NERDTree
" --------

" toggle nerdtree
map <C-e> :NERDTreeToggle<CR>

" show current file in NERDTree
map <leader>e :NERDTreeFind<CR>

" map "open in split" to be like Ctrl-p
let NERDTreeMapOpenSplit = 's'
let NERDTreeMapOpenVSplit = 'v'

" auto close when last open window is a NERDTree panel
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


" NERDTree configuration
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" CtrlP
" -----
let g:ctrlp_working_path_mode = 'ra'
" hmm filtering bower and node dir doesn't seem to work, need to look into
" that
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$|bower_components$\|node_modules$',
  \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
" no limit on the number of files
let g:ctrlp_max_files=0


" leader-p will search in buffers
nnoremap <leader>p :CtrlPBuffer<CR>

" YouCompleteMe
" -------------

" jump to definition
nnoremap <leader>j :YcmCompleter GoToDefinitionElseDeclaration<CR>

" close preview window when choice selected and leave insert mode
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1

" recommanded Django settings
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string
let g:ycm_min_num_of_chars_for_completion = 1 " to complete short snippets

let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.'],
  \   'objc' : ['->', '.'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }

" force system python (also in virtualenvs)
let g:ycm_path_to_python_interpreter = '/usr/bin/python'

" UtliSnips
" ---------

" tab conflicts with youcompleteme
let g:UltiSnipsExpandTrigger = '<c-s>'
" let use the enter key when snippet in youcompleteme list
let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" to edit snippets
nnoremap <leader>s :UltiSnipsEdit<CR>
" edit snippets for current filetype, in an horizontal split
let g:UltiSnipsEditSplit = "horizontal"

" Tmux-navigation
" ---------------

" requires to kill the bash ctrl-j handler
let g:BASH_Ctrl_j = 'off'

" Syntastic
" --------

" 80 char width is not enforced...
let g:syntastic_python_flake8_args='--ignore=E501,E225'

" Python mode
" -----------

" we don't want it to do any linting or completion, 
" Syntastic and YouCompleteMe are taking care of that already
let g:pymode_rope = 0
let g:pymode_lint = 0

" Python doc by pressing D
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 1

" Markdown Preview
" ----------------

" Remap preview to Ctrl-M
let vim_markdown_preview_hotkey='<C-m>'

" Force 80 chars width
autocmd FileType markdown setlocal tw=80 
